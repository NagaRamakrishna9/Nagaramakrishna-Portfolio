{
  "version": 3,
  "sources": ["../../../../../../node_modules/abs-svg-path/index.js", "../../../../../../node_modules/parse-svg-path/index.js", "../../../../../../node_modules/color-name/index.js", "../../../../../../node_modules/is-arrayish/index.js", "../../../../../../node_modules/simple-swizzle/index.js", "../../../../../../node_modules/color-string/index.js", "../../../../../../node_modules/@react-pdf/primitives/src/index.js", "../../../../../../node_modules/@react-pdf/fns/lib/index.js", "../../../../../../node_modules/@react-pdf/render/lib/index.js", "../../../../../../node_modules/svg-arc-to-cubic-bezier/modules/index.js", "../../../../../../node_modules/normalize-svg-path/index.mjs"],
  "sourcesContent": ["\nmodule.exports = absolutize\n\n/**\n * redefine `path` with absolute coordinates\n *\n * @param {Array} path\n * @return {Array}\n */\n\nfunction absolutize(path){\n\tvar startX = 0\n\tvar startY = 0\n\tvar x = 0\n\tvar y = 0\n\n\treturn path.map(function(seg){\n\t\tseg = seg.slice()\n\t\tvar type = seg[0]\n\t\tvar command = type.toUpperCase()\n\n\t\t// is relative\n\t\tif (type != command) {\n\t\t\tseg[0] = command\n\t\t\tswitch (type) {\n\t\t\t\tcase 'a':\n\t\t\t\t\tseg[6] += x\n\t\t\t\t\tseg[7] += y\n\t\t\t\t\tbreak\n\t\t\t\tcase 'v':\n\t\t\t\t\tseg[1] += y\n\t\t\t\t\tbreak\n\t\t\t\tcase 'h':\n\t\t\t\t\tseg[1] += x\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tfor (var i = 1; i < seg.length;) {\n\t\t\t\t\t\tseg[i++] += x\n\t\t\t\t\t\tseg[i++] += y\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// update cursor state\n\t\tswitch (command) {\n\t\t\tcase 'Z':\n\t\t\t\tx = startX\n\t\t\t\ty = startY\n\t\t\t\tbreak\n\t\t\tcase 'H':\n\t\t\t\tx = seg[1]\n\t\t\t\tbreak\n\t\t\tcase 'V':\n\t\t\t\ty = seg[1]\n\t\t\t\tbreak\n\t\t\tcase 'M':\n\t\t\t\tx = startX = seg[1]\n\t\t\t\ty = startY = seg[2]\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tx = seg[seg.length - 2]\n\t\t\t\ty = seg[seg.length - 1]\n\t\t}\n\n\t\treturn seg\n\t})\n}\n", "\nmodule.exports = parse\n\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\n\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\n\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n\tvar data = []\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase()\n\t\targs = parseValues(args)\n\n\t\t// overloaded moveTo\n\t\tif (type == 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\n\t\t\ttype = 'l'\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\n\t\t}\n\n\t\twhile (true) {\n\t\t\tif (args.length == length[type]) {\n\t\t\t\targs.unshift(command)\n\t\t\t\treturn data.push(args)\n\t\t\t}\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\n\t\t}\n\t})\n\treturn data\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number)\n\treturn numbers ? numbers.map(Number) : []\n}\n", "'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n", "module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n", "'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n", "/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\nvar hasOwnProperty = Object.hasOwnProperty;\n\nvar reverseNames = Object.create(null);\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (hasOwnProperty.call(colorNames, name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)\\s*(?:[,|\\/]\\s*([+-]?[\\d\\.]+)(%?)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,?\\s*([+-]?[\\d\\.]+)\\%\\s*,?\\s*([+-]?[\\d\\.]+)\\%\\s*(?:[,|\\/]\\s*([+-]?[\\d\\.]+)(%?)\\s*)?\\)$/;\n\tvar keyword = /^(\\w+)$/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = parseInt(hexAlpha, 16) / 255;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\tif (match[5]) {\n\t\t\t\trgb[3] = parseFloat(match[4]) * 0.01;\n\t\t\t} else {\n\t\t\t\trgb[3] = parseFloat(match[4]);\n\t\t\t}\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\tif (match[5]) {\n\t\t\t\trgb[3] = parseFloat(match[4]) * 0.01;\n\t\t\t} else {\n\t\t\t\trgb[3] = parseFloat(match[4]);\n\t\t\t}\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\tif (!hasOwnProperty.call(colorNames, match[1])) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d{0,3}\\.)?\\d+)(?:deg)?\\s*,?\\s*([+-]?[\\d\\.]+)%\\s*,?\\s*([+-]?[\\d\\.]+)%\\s*(?:[,|\\/]\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = Math.round(num).toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n", "export const G = 'G';\nexport const Svg = 'SVG';\nexport const View = 'VIEW';\nexport const Text = 'TEXT';\nexport const Link = 'LINK';\nexport const Page = 'PAGE';\nexport const Note = 'NOTE';\nexport const Path = 'PATH';\nexport const Rect = 'RECT';\nexport const Line = 'LINE';\nexport const Stop = 'STOP';\nexport const Defs = 'DEFS';\nexport const Image = 'IMAGE';\nexport const Tspan = 'TSPAN';\nexport const Canvas = 'CANVAS';\nexport const Circle = 'CIRCLE';\nexport const Ellipse = 'ELLIPSE';\nexport const Polygon = 'POLYGON';\nexport const Document = 'DOCUMENT';\nexport const Polyline = 'POLYLINE';\nexport const ClipPath = 'CLIP_PATH';\nexport const TextInstance = 'TEXT_INSTANCE';\nexport const LinearGradient = 'LINEAR_GRADIENT';\nexport const RadialGradient = 'RADIAL_GRADIENT';\n", "/**\n * Applies a function to the value at the given index of an array\n\n * @param {number} index\n * @param {function} fn\n * @param {array} collection\n * @returns copy of the array with the element at the given index replaced with the result of the function application.\n */\nconst adjust = (index, fn, collection) => {\n  if (index >= 0 && index >= collection.length) return collection;\n  if (index < 0 && Math.abs(index) > collection.length) return collection;\n  const i = index < 0 ? collection.length + index : index;\n  return Object.assign([], collection, {\n    [i]: fn(collection[i])\n  });\n};\n\n/**\n * Reverses the list\n *\n * @template {unknown} T\n * @param {T[]} list list to be reversed\n * @returns {T[]} reversed list\n */\nconst reverse = list => Array.prototype.slice.call(list, 0).reverse();\n\n/* eslint-disable no-await-in-loop */\n\n\n/**\n * @typedef {Function} AsyncCompose\n * @param {any} value\n * @param {...any} args\n * @returns {any} result\n */\n\n/**\n * Performs right-to-left function composition with async functions support\n *\n * @param {...Function} fns functions\n * @returns {AsyncCompose} composed function\n */\nconst asyncCompose = function () {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n  return async function (value) {\n    let result = value;\n    const reversedFns = reverse(fns);\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    for (let i = 0; i < reversedFns.length; i += 1) {\n      const fn = reversedFns[i];\n      result = await fn(result, ...args);\n    }\n    return result;\n  };\n};\n\n/**\n * Capitalize first letter of each word\n *\n * @param {string} value string\n * @returns {string} capitalized string\n */\nconst capitalize = value => {\n  if (!value) return value;\n  return value.replace(/(^|\\s)\\S/g, l => l.toUpperCase());\n};\n\n/**\n * Casts value to array\n *\n * @template T\n * @param {T|T[]} value value\n * @returns {T[]} array\n */\nconst castArray = value => {\n  return Array.isArray(value) ? value : [value];\n};\n\n/* eslint-disable no-await-in-loop */\n\n\n/**\n * @typedef {Function} Compose\n * @param {any} value\n * @param {...any} args\n * @returns {any} result\n */\n\n/**\n * Performs right-to-left function composition\n *\n * @param {...Function} fns functions\n * @returns {Compose} composed function\n */\nconst compose = function () {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n  return function (value) {\n    let result = value;\n    const reversedFns = reverse(fns);\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    for (let i = 0; i < reversedFns.length; i += 1) {\n      const fn = reversedFns[i];\n      result = fn(result, ...args);\n    }\n    return result;\n  };\n};\n\n/**\n * Drops the last element from an array.\n *\n * @template T\n * @param {T[]} array the array to drop the last element from\n * @returns {T[]} the new array with the last element dropped\n */\nconst dropLast = array => array.slice(0, array.length - 1);\n\n/**\n * Applies a set of transformations to an object and returns a new object with the transformed values.\n *\n * @template T\n * @param {Record<string, (value: T) => T | Record<string, (value: T) => T>>} transformations - The transformations to apply.\n * @param {T} object the object to transform.\n * @returns {T} the transformed object.\n */\nconst evolve = (transformations, object) => {\n  const result = object instanceof Array ? [] : {};\n  const keys = Object.keys(object);\n  for (let i = 0; i < keys.length; i += 1) {\n    const key = keys[i];\n    const transformation = transformations[key];\n    const type = typeof transformation;\n    if (type === 'function') {\n      result[key] = transformation(object[key]);\n    } else if (transformation && type === 'object') {\n      result[key] = evolve(transformation, object[key]);\n    } else {\n      result[key] = object[key];\n    }\n  }\n  return result;\n};\n\n/**\n * Checks if a value is null or undefined.\n *\n * @template {unknown} T\n * @param {T} value the value to check\n * @returns {T is null | undefined} true if the value is null or undefined, false otherwise\n */\nconst isNil = value => value === null || value === undefined;\n\n/**\n * Retrieves the value at a given path from an object.\n *\n * @param {object} target the object to retrieve the value from.\n * @param {string | string[]} path the path of the value to retrieve.\n * @param {*} defaultValue the default value to return if the path does not exist.\n * @returns {*} the value at the given path, or the default value if the path does not exist.\n */\nconst get = (target, path, defaultValue) => {\n  if (isNil(target)) return defaultValue;\n  const _path = castArray(path);\n  let result = target;\n  for (let i = 0; i < _path.length; i += 1) {\n    if (isNil(result)) return undefined;\n    result = result[_path[i]];\n  }\n  return isNil(result) ? defaultValue : result;\n};\n\n/**\n * Returns the last character of a string.\n *\n * @param {string} value the input string\n * @returns {string} the last character of the string\n */\nconst last = value => {\n  return value === '' ? '' : value[value.length - 1];\n};\n\n/**\n * Maps over the values of an object and applies a function to each value.\n *\n * @param {Object} object the object to map over\n * @param {Function} fn the function to apply to each value\n * @returns {Object} a new object with the mapped values\n */\nconst mapValues = (object, fn) => {\n  const entries = Object.entries(object);\n  return entries.reduce((acc, _ref, index) => {\n    let [key, value] = _ref;\n    acc[key] = fn(value, key, index);\n    return acc;\n  }, {});\n};\n\n/**\n * @param {string | number} value\n * @returns {RegExpExecArray | null} match\n */\nconst isPercent = value => /((-)?\\d+\\.?\\d*)%/g.exec(`${value}`);\n\n/**\n * Get percentage value of input\n *\n * @param {string | number} value\n * @returns {{ percent: number, value: number } | null} percent value (if matches)\n */\nconst matchPercent = value => {\n  const match = isPercent(value);\n  if (match) {\n    const f = parseFloat(match[1]);\n    const percent = f / 100;\n    return {\n      percent,\n      value: f\n    };\n  }\n  return null;\n};\n\n/**\n * Creates a new object by omitting specified keys from the original object.\n *\n * @param {string|string[]} keys the key or keys to omit\n * @param {object} object the original object\n * @returns {object} the new object without the omitted keys\n */\nconst omit = (keys, object) => {\n  const _keys = castArray(keys);\n  const copy = Object.assign({}, object);\n  _keys.forEach(key => {\n    delete copy[key];\n  });\n  return copy;\n};\n\n/**\n * Picks the specified keys from an object and returns a new object with only those keys.\n *\n * @param {string[]} keys the keys to pick from the object\n * @param {object} obj the object to pick the keys from\n * @returns {object} a new object with only the picked keys\n */\nconst pick = (keys, obj) => {\n  const result = {};\n  for (let i = 0; i < keys.length; i += 1) {\n    const key = keys[i];\n    if (key in obj) result[key] = obj[key];\n  }\n  return result;\n};\n\n/**\n * Repeats an element a specified number of times.\n *\n * @template {unknown} T\n * @param {T} element element to be repeated\n * @param {number} length number of times to repeat element\n * @returns {T[]} repeated elements\n */\nconst repeat = function (elem, length) {\n  if (length === void 0) {\n    length = 0;\n  }\n  const result = new Array(length);\n  for (let i = 0; i < length; i += 1) {\n    result[i] = elem;\n  }\n  return result;\n};\n\n/**\n * Capitalize first letter of string\n *\n * @param {string} value string\n * @returns {string} capitalized string\n */\nconst upperFirst = value => {\n  if (!value) return value;\n  return value.charAt(0).toUpperCase() + value.slice(1);\n};\n\nexport { adjust, asyncCompose, capitalize, castArray, compose, dropLast, evolve, get, isNil, last, mapValues, matchPercent, omit, pick, repeat, reverse, upperFirst };\n", "import * as P from '@react-pdf/primitives';\nimport { isNil, matchPercent } from '@react-pdf/fns';\nimport absPath from 'abs-svg-path';\nimport parsePath from 'parse-svg-path';\nimport normalizePath from 'normalize-svg-path';\nimport colorString from 'color-string';\n\nconst renderPath = (ctx, node) => {\n  var _node$props;\n  const d = (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.d;\n  if (d) ctx.path(node.props.d);\n};\n\nconst KAPPA$3 = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nconst renderRect = (ctx, node) => {\n  var _node$props, _node$props2, _node$props3, _node$props4, _node$props5, _node$props6;\n  const x = ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.x) || 0;\n  const y = ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.y) || 0;\n  const rx = ((_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.rx) || 0;\n  const ry = ((_node$props4 = node.props) === null || _node$props4 === void 0 ? void 0 : _node$props4.ry) || 0;\n  const width = ((_node$props5 = node.props) === null || _node$props5 === void 0 ? void 0 : _node$props5.width) || 0;\n  const height = ((_node$props6 = node.props) === null || _node$props6 === void 0 ? void 0 : _node$props6.height) || 0;\n  if (!width || !height) return;\n  if (rx && ry) {\n    const krx = rx * KAPPA$3;\n    const kry = ry * KAPPA$3;\n    ctx.moveTo(x + rx, y);\n    ctx.lineTo(x - rx + width, y);\n    ctx.bezierCurveTo(x - rx + width + krx, y, x + width, y + ry - kry, x + width, y + ry);\n    ctx.lineTo(x + width, y + height - ry);\n    ctx.bezierCurveTo(x + width, y + height - ry + kry, x - rx + width + krx, y + height, x - rx + width, y + height);\n    ctx.lineTo(x + rx, y + height);\n    ctx.bezierCurveTo(x + rx - krx, y + height, x, y + height - ry + kry, x, y + height - ry);\n    ctx.lineTo(x, y + ry);\n    ctx.bezierCurveTo(x, y + ry - kry, x + rx - krx, y, x + rx, y);\n  } else {\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + width, y);\n    ctx.lineTo(x + width, y + height);\n    ctx.lineTo(x, y + height);\n  }\n  ctx.closePath();\n};\n\nconst renderLine$1 = (ctx, node) => {\n  const {\n    x1,\n    x2,\n    y1,\n    y2\n  } = node.props || {};\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n};\n\nconst renderGroup = () => {\n  // noop\n};\n\nconst KAPPA$2 = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nconst drawEllipse = function (ctx, cx, cy, rx, ry) {\n  if (cx === void 0) {\n    cx = 0;\n  }\n  if (cy === void 0) {\n    cy = 0;\n  }\n  const x = cx - rx;\n  const y = cy - ry;\n  const ox = rx * KAPPA$2;\n  const oy = ry * KAPPA$2;\n  const xe = x + rx * 2;\n  const ye = y + ry * 2;\n  const xm = x + rx;\n  const ym = y + ry;\n  ctx.moveTo(x, ym);\n  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n  ctx.closePath();\n};\nconst renderEllipse = (ctx, node) => {\n  const {\n    cx,\n    cy,\n    rx,\n    ry\n  } = node.props || {};\n  drawEllipse(ctx, cx, cy, rx, ry);\n};\n\nconst renderCircle = (ctx, node) => {\n  var _node$props, _node$props2, _node$props3;\n  const cx = (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.cx;\n  const cy = (_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.cy;\n  const r = (_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.r;\n  drawEllipse(ctx, cx, cy, r, r);\n};\n\nconst renderGlyphs = function (ctx, glyphs, positions, x, y, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const scale = 1000 / ctx._fontSize;\n  const unitsPerEm = ctx._font.font.unitsPerEm || 1000;\n  const advanceWidthScale = 1000 / unitsPerEm;\n\n  // Glyph encoding and positioning\n  const encodedGlyphs = ctx._font.encodeGlyphs(glyphs);\n  const encodedPositions = positions.map((pos, i) => ({\n    xAdvance: pos.xAdvance * scale,\n    yAdvance: pos.yAdvance * scale,\n    xOffset: pos.xOffset,\n    yOffset: pos.yOffset,\n    advanceWidth: glyphs[i].advanceWidth * advanceWidthScale\n  }));\n  return ctx._glyphs(encodedGlyphs, encodedPositions, x, y, options);\n};\n\nconst renderRun$1 = (ctx, run) => {\n  const runAdvanceWidth = run.xAdvance;\n  const {\n    font,\n    fontSize,\n    color,\n    opacity\n  } = run.attributes;\n  ctx.fillColor(color);\n  ctx.fillOpacity(opacity);\n  if (font.sbix || font.COLR && font.CPAL) {\n    ctx.save();\n    ctx.translate(0, -run.ascent);\n    for (let i = 0; i < run.glyphs.length; i += 1) {\n      const position = run.positions[i];\n      const glyph = run.glyphs[i];\n      ctx.save();\n      ctx.translate(position.xOffset, position.yOffset);\n      glyph.render(ctx, fontSize);\n      ctx.restore();\n      ctx.translate(position.xAdvance, position.yAdvance);\n    }\n    ctx.restore();\n  } else {\n    ctx.font(typeof font.name === 'string' ? font.name : font, fontSize);\n    try {\n      renderGlyphs(ctx, run.glyphs, run.positions, 0, 0);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  ctx.translate(runAdvanceWidth, 0);\n};\nconst renderSpan = (ctx, line, textAnchor, dominantBaseline) => {\n  var _line$box, _line$box2, _line$runs$, _line$runs$2, _line$runs$2$attribut;\n  ctx.save();\n  const x = ((_line$box = line.box) === null || _line$box === void 0 ? void 0 : _line$box.x) || 0;\n  const y = ((_line$box2 = line.box) === null || _line$box2 === void 0 ? void 0 : _line$box2.y) || 0;\n  const font = (_line$runs$ = line.runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes.font;\n  const scale = ((_line$runs$2 = line.runs[0]) === null || _line$runs$2 === void 0 ? void 0 : (_line$runs$2$attribut = _line$runs$2.attributes) === null || _line$runs$2$attribut === void 0 ? void 0 : _line$runs$2$attribut.scale) || 1;\n  const width = line.xAdvance;\n  const ascent = font.ascent * scale;\n  const xHeight = font.xHeight * scale;\n  const descent = font.descent * scale;\n  const capHeight = font.capHeight * scale;\n  let xTranslate = x;\n  let yTranslate = y;\n  switch (textAnchor) {\n    case 'middle':\n      xTranslate = x - width / 2;\n      break;\n    case 'end':\n      xTranslate = x - width;\n      break;\n    default:\n      xTranslate = x;\n      break;\n  }\n  switch (dominantBaseline) {\n    case 'middle':\n    case 'central':\n      yTranslate = y + capHeight / 2;\n      break;\n    case 'hanging':\n      yTranslate = y + capHeight;\n      break;\n    case 'mathematical':\n      yTranslate = y + xHeight;\n      break;\n    case 'text-after-edge':\n      yTranslate = y + descent;\n      break;\n    case 'text-before-edge':\n      yTranslate = y + ascent;\n      break;\n    default:\n      yTranslate = y;\n      break;\n  }\n  ctx.translate(xTranslate, yTranslate);\n  line.runs.forEach(run => renderRun$1(ctx, run));\n  ctx.restore();\n};\nconst renderSvgText = (ctx, node) => {\n  node.children.forEach(span => renderSpan(ctx, span.lines[0], span.props.textAnchor, span.props.dominantBaseline));\n};\n\n/**\n * Create pairs from array\n *\n * @template T\n * @param {T[]} values array\n * @returns {T[][]} pairs\n */\nconst pairs = values => {\n  const result = [];\n  for (let i = 0; i < values.length; i += 2) {\n    result.push([values[i], values[i + 1]]);\n  }\n  return result;\n};\n\n/**\n * Parse svg-like points into number arrays\n *\n * @param {string} points string ex. \"20,30 50,60\"\n * @returns {number[][]} points array ex. [[20, 30], [50, 60]]\n */\nconst parsePoints = points => {\n  let values = (points || '').trim().replace(/,/g, ' ').replace(/(\\d)-(\\d)/g, '$1 -$2').split(/\\s+/);\n  if (values.length % 2 !== 0) {\n    values = values.slice(0, -1);\n  }\n  const mappedValues = values.map(parseFloat);\n  return pairs(mappedValues);\n};\n\nconst drawPolyline = (ctx, points) => {\n  if (points.length > 0) {\n    ctx.moveTo(points[0][0], points[0][1]);\n    points.slice(1).forEach(p => ctx.lineTo(p[0], p[1]));\n  }\n};\nconst renderPolyline = (ctx, node) => {\n  const points = parsePoints(node.props.points || '');\n  drawPolyline(ctx, points);\n};\n\nconst renderPolygon = (ctx, node) => {\n  renderPolyline(ctx, node);\n  ctx.closePath();\n};\n\nconst renderImage$1 = (ctx, node) => {\n  if (!node.image.data) return;\n  const {\n    x,\n    y\n  } = node.props;\n  const {\n    width,\n    height,\n    opacity\n  } = node.style;\n  const paddingTop = node.box.paddingLeft || 0;\n  const paddingLeft = node.box.paddingLeft || 0;\n  if (width === 0 || height === 0) {\n    console.warn(`Image with src '${node.props.href}' skipped due to invalid dimensions`);\n    return;\n  }\n  ctx.save();\n  ctx.fillOpacity(opacity || 1).image(node.image.data, x + paddingLeft, y + paddingTop, {\n    width,\n    height\n  });\n  ctx.restore();\n};\n\n// This constant is used to approximate a symmetrical arc using a cubic\n// Bezier curve.\nconst KAPPA$1 = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nconst clipNode = (ctx, node) => {\n  if (!node.style) return;\n  const {\n    top,\n    left,\n    width,\n    height\n  } = node.box;\n  const {\n    borderTopLeftRadius = 0,\n    borderTopRightRadius = 0,\n    borderBottomRightRadius = 0,\n    borderBottomLeftRadius = 0\n  } = node.style;\n\n  // Border top\n  const rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n  const ctr = rtr * (1.0 - KAPPA$1);\n  ctx.moveTo(left + rtr, top);\n  ctx.lineTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - ctr, top, left + width, top + ctr, left + width, top + rtr);\n\n  // Border right\n  const rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n  const cbr = rbr * (1.0 - KAPPA$1);\n  ctx.lineTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - cbr, left + width - cbr, top + height, left + width - rbr, top + height);\n\n  // Border bottom\n  const rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n  const cbl = rbl * (1.0 - KAPPA$1);\n  ctx.lineTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + cbl, top + height, left, top + height - cbl, left, top + height - rbl);\n\n  // Border left\n  const rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n  const ctl = rtl * (1.0 - KAPPA$1);\n  ctx.lineTo(left, top + rtl);\n  ctx.bezierCurveTo(left, top + ctl, left + ctl, top, left + rtl, top);\n  ctx.closePath();\n  ctx.clip();\n};\n\nconst applySingleTransformation = (ctx, transform, origin) => {\n  const {\n    operation,\n    value\n  } = transform;\n  switch (operation) {\n    case 'scale':\n      {\n        const [scaleX, scaleY] = value;\n        ctx.scale(scaleX, scaleY, {\n          origin\n        });\n        break;\n      }\n    case 'rotate':\n      {\n        const [angle] = value;\n        ctx.rotate(angle, {\n          origin\n        });\n        break;\n      }\n    case 'translate':\n      {\n        const [x, y = 0] = value;\n        ctx.translate(x, y, {\n          origin\n        });\n        break;\n      }\n    case 'skew':\n      {\n        const [xAngle = 0, yAngle = 0] = value;\n        const radx = xAngle * Math.PI / 180;\n        const rady = yAngle * Math.PI / 180;\n        const tanx = Math.tan(radx);\n        const tany = Math.tan(rady);\n        let x = 0;\n        let y = 0;\n        if (origin != null) {\n          [x, y] = Array.from(origin);\n          const x1 = x + tanx * y;\n          const y1 = y + tany * x;\n          x -= x1;\n          y -= y1;\n        }\n        ctx.transform(1, tany, tanx, 1, x, y);\n        break;\n      }\n    case 'matrix':\n      {\n        ctx.transform(...value);\n        break;\n      }\n    default:\n      {\n        console.error(`Transform operation: '${operation}' doesn't supported`);\n      }\n  }\n};\nconst applyTransformations = (ctx, node) => {\n  var _node$style, _node$props;\n  if (!node.origin) return;\n  const origin = [node.origin.left, node.origin.top];\n  const operations = ((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.transform) || ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.transform) || [];\n  operations.forEach(operation => {\n    applySingleTransformation(ctx, operation, origin);\n  });\n};\n\n// From https://github.com/dy/svg-path-bounds/blob/master/index.js\nconst getPathBoundingBox = node => {\n  var _node$props;\n  const path = normalizePath(absPath(parsePath(((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.d) || '')));\n  if (!path.length) return [0, 0, 0, 0];\n  const bounds = [Infinity, Infinity, -Infinity, -Infinity];\n  for (let i = 0, l = path.length; i < l; i += 1) {\n    const points = path[i].slice(1);\n    for (let j = 0; j < points.length; j += 2) {\n      if (points[j + 0] < bounds[0]) bounds[0] = points[j + 0];\n      if (points[j + 1] < bounds[1]) bounds[1] = points[j + 1];\n      if (points[j + 0] > bounds[2]) bounds[2] = points[j + 0];\n      if (points[j + 1] > bounds[3]) bounds[3] = points[j + 1];\n    }\n  }\n  return bounds;\n};\nconst getCircleBoundingBox = node => {\n  var _node$props2, _node$props3, _node$props4;\n  const r = ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.r) || 0;\n  const cx = ((_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.cx) || 0;\n  const cy = ((_node$props4 = node.props) === null || _node$props4 === void 0 ? void 0 : _node$props4.cy) || 0;\n  return [cx - r, cy - r, cx + r, cy + r];\n};\nconst getEllipseBoundingBox = node => {\n  var _node$props5, _node$props6, _node$props7, _node$props8;\n  const cx = ((_node$props5 = node.props) === null || _node$props5 === void 0 ? void 0 : _node$props5.cx) || 0;\n  const cy = ((_node$props6 = node.props) === null || _node$props6 === void 0 ? void 0 : _node$props6.cy) || 0;\n  const rx = ((_node$props7 = node.props) === null || _node$props7 === void 0 ? void 0 : _node$props7.rx) || 0;\n  const ry = ((_node$props8 = node.props) === null || _node$props8 === void 0 ? void 0 : _node$props8.ry) || 0;\n  return [cx - rx, cy - ry, cx + rx, cy + ry];\n};\nconst getLineBoundingBox = node => {\n  var _node$props9, _node$props10, _node$props11, _node$props12;\n  const x1 = ((_node$props9 = node.props) === null || _node$props9 === void 0 ? void 0 : _node$props9.x1) || 0;\n  const y1 = ((_node$props10 = node.props) === null || _node$props10 === void 0 ? void 0 : _node$props10.y1) || 0;\n  const x2 = ((_node$props11 = node.props) === null || _node$props11 === void 0 ? void 0 : _node$props11.x2) || 0;\n  const y2 = ((_node$props12 = node.props) === null || _node$props12 === void 0 ? void 0 : _node$props12.y2) || 0;\n  return [Math.min(x1, x2), Math.min(y1, y2), Math.max(x1, x2), Math.max(y1, y2)];\n};\nconst getRectBoundingBox = node => {\n  var _node$props13, _node$props14, _node$props15, _node$props16;\n  const x = ((_node$props13 = node.props) === null || _node$props13 === void 0 ? void 0 : _node$props13.x) || 0;\n  const y = ((_node$props14 = node.props) === null || _node$props14 === void 0 ? void 0 : _node$props14.y) || 0;\n  const width = ((_node$props15 = node.props) === null || _node$props15 === void 0 ? void 0 : _node$props15.width) || 0;\n  const height = ((_node$props16 = node.props) === null || _node$props16 === void 0 ? void 0 : _node$props16.height) || 0;\n  return [x, y, x + width, y + height];\n};\nconst max = values => Math.max(-Infinity, ...values);\nconst min = values => Math.min(Infinity, ...values);\nconst getPolylineBoundingBox = node => {\n  var _node$props17;\n  const points = parsePoints(((_node$props17 = node.props) === null || _node$props17 === void 0 ? void 0 : _node$props17.points) || []);\n  const xValues = points.map(p => p[0]);\n  const yValues = points.map(p => p[1]);\n  return [min(xValues), min(yValues), max(xValues), max(yValues)];\n};\nconst boundingBoxFns = {\n  [P.Rect]: getRectBoundingBox,\n  [P.Line]: getLineBoundingBox,\n  [P.Path]: getPathBoundingBox,\n  [P.Circle]: getCircleBoundingBox,\n  [P.Ellipse]: getEllipseBoundingBox,\n  [P.Polygon]: getPolylineBoundingBox,\n  [P.Polyline]: getPolylineBoundingBox\n};\nconst getBoundingBox = node => {\n  const boundingBoxFn = boundingBoxFns[node.type];\n  return boundingBoxFn ? boundingBoxFn(node) : [0, 0, 0, 0];\n};\n\nconst setStrokeWidth = (ctx, node) => {\n  var _node$props;\n  const lineWidth = ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.strokeWidth) || 0;\n  if (lineWidth) ctx.lineWidth(lineWidth);\n};\nconst setStrokeColor = (ctx, node) => {\n  var _node$props2;\n  const strokeColor = ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.stroke) || null;\n  if (strokeColor) ctx.strokeColor(strokeColor);\n};\nconst setOpacity = (ctx, node) => {\n  var _node$props3;\n  const opacity = ((_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.opacity) || null;\n  if (!isNil(opacity)) ctx.opacity(opacity);\n};\nconst setFillOpacity = (ctx, node) => {\n  var _node$props4;\n  const fillOpacity = ((_node$props4 = node.props) === null || _node$props4 === void 0 ? void 0 : _node$props4.fillOpacity) || null;\n  if (!isNil(fillOpacity)) ctx.fillOpacity(fillOpacity);\n};\nconst setStrokeOpacity = (ctx, node) => {\n  var _node$props5;\n  const strokeOpacity = ((_node$props5 = node.props) === null || _node$props5 === void 0 ? void 0 : _node$props5.strokeOpacity) || null;\n  if (!isNil(strokeOpacity)) ctx.strokeOpacity(strokeOpacity);\n};\nconst setLineJoin = (ctx, node) => {\n  var _node$props6;\n  const lineJoin = ((_node$props6 = node.props) === null || _node$props6 === void 0 ? void 0 : _node$props6.strokeLinejoin) || null;\n  if (lineJoin) ctx.lineJoin(lineJoin);\n};\nconst setLineCap = (ctx, node) => {\n  var _node$props7;\n  const lineCap = ((_node$props7 = node.props) === null || _node$props7 === void 0 ? void 0 : _node$props7.strokeLinecap) || null;\n  if (lineCap) ctx.lineCap(lineCap);\n};\nconst setLineDash = (ctx, node) => {\n  var _node$props8;\n  const value = ((_node$props8 = node.props) === null || _node$props8 === void 0 ? void 0 : _node$props8.strokeDasharray) || null;\n  if (value) ctx.dash(value.split(/[\\s,]+/).map(Number));\n};\nconst hasLinearGradientFill = node => {\n  var _node$props9, _node$props9$fill;\n  return ((_node$props9 = node.props) === null || _node$props9 === void 0 ? void 0 : (_node$props9$fill = _node$props9.fill) === null || _node$props9$fill === void 0 ? void 0 : _node$props9$fill.type) === P.LinearGradient;\n};\nconst hasRadialGradientFill = node => {\n  var _node$props10, _node$props10$fill;\n  return ((_node$props10 = node.props) === null || _node$props10 === void 0 ? void 0 : (_node$props10$fill = _node$props10.fill) === null || _node$props10$fill === void 0 ? void 0 : _node$props10$fill.type) === P.RadialGradient;\n};\n\n// Math simplified from https://github.com/devongovett/svgkit/blob/master/src/elements/SVGGradient.js#L104\nconst setLinearGradientFill = (ctx, node) => {\n  var _node$props11;\n  const bbox = getBoundingBox(node);\n  const gradient = ((_node$props11 = node.props) === null || _node$props11 === void 0 ? void 0 : _node$props11.fill) || null;\n  const x1 = gradient.props.x1 || 0;\n  const y1 = gradient.props.y1 || 0;\n  const x2 = gradient.props.x2 || 1;\n  const y2 = gradient.props.y2 || 0;\n  const m0 = bbox[2] - bbox[0];\n  const m3 = bbox[3] - bbox[1];\n  const m4 = bbox[0];\n  const m5 = bbox[1];\n  const gx1 = m0 * x1 + m4;\n  const gy1 = m3 * y1 + m5;\n  const gx2 = m0 * x2 + m4;\n  const gy2 = m3 * y2 + m5;\n  const grad = ctx.linearGradient(gx1, gy1, gx2, gy2);\n  gradient.children.forEach(stop => {\n    grad.stop(stop.props.offset, stop.props.stopColor, stop.props.stopOpacity);\n  });\n  ctx.fill(grad);\n};\n\n// Math simplified from https://github.com/devongovett/svgkit/blob/master/src/elements/SVGGradient.js#L155\nconst setRadialGradientFill = (ctx, node) => {\n  var _node$props12;\n  const bbox = getBoundingBox(node);\n  const gradient = ((_node$props12 = node.props) === null || _node$props12 === void 0 ? void 0 : _node$props12.fill) || null;\n  const cx = gradient.props.cx || 0.5;\n  const cy = gradient.props.cy || 0.5;\n  const fx = gradient.props.fx || cx;\n  const fy = gradient.props.fy || cy;\n  const r = gradient.props.r || 0.5;\n  const m0 = bbox[2] - bbox[0];\n  const m3 = bbox[3] - bbox[1];\n  const m4 = bbox[0];\n  const m5 = bbox[1];\n  const gr = r * m0;\n  const gcx = m0 * cx + m4;\n  const gcy = m3 * cy + m5;\n  const gfx = m0 * fx + m4;\n  const gfy = m3 * fy + m5;\n  const grad = ctx.radialGradient(gfx, gfy, 0, gcx, gcy, gr);\n  gradient.children.forEach(stop => {\n    grad.stop(stop.props.offset, stop.props.stopColor, stop.props.stopOpacity);\n  });\n  ctx.fill(grad);\n};\nconst setFillColor = (ctx, node) => {\n  var _node$props13;\n  const fillColor = ((_node$props13 = node.props) === null || _node$props13 === void 0 ? void 0 : _node$props13.fill) || null;\n  if (fillColor) ctx.fillColor(fillColor);\n};\nconst setFill = (ctx, node) => {\n  if (hasLinearGradientFill(node)) return setLinearGradientFill(ctx, node);\n  if (hasRadialGradientFill(node)) return setRadialGradientFill(ctx, node);\n  return setFillColor(ctx, node);\n};\nconst draw = (ctx, node) => {\n  const props = node.props || {};\n  if (props.fill && props.stroke) {\n    ctx.fillAndStroke(props.fillRule);\n  } else if (props.fill) {\n    ctx.fill(props.fillRule);\n  } else if (props.stroke) {\n    ctx.stroke();\n  } else {\n    ctx.save();\n    ctx.opacity(0);\n    ctx.fill(null);\n    ctx.restore();\n  }\n};\nconst noop = () => {};\nconst renderFns$1 = {\n  [P.Tspan]: noop,\n  [P.TextInstance]: noop,\n  [P.Path]: renderPath,\n  [P.Rect]: renderRect,\n  [P.Line]: renderLine$1,\n  [P.G]: renderGroup,\n  [P.Text]: renderSvgText,\n  [P.Circle]: renderCircle,\n  [P.Image]: renderImage$1,\n  [P.Ellipse]: renderEllipse,\n  [P.Polygon]: renderPolygon,\n  [P.Polyline]: renderPolyline\n};\nconst renderNode$1 = (ctx, node) => {\n  const renderFn = renderFns$1[node.type];\n  if (renderFn) {\n    renderFn(ctx, node);\n  } else {\n    console.warn(`SVG node of type ${node.type} is not currently supported`);\n  }\n};\nconst drawNode = (ctx, node) => {\n  setLineCap(ctx, node);\n  setLineDash(ctx, node);\n  setLineJoin(ctx, node);\n  setStrokeWidth(ctx, node);\n  setStrokeColor(ctx, node);\n  setFill(ctx, node);\n  setStrokeOpacity(ctx, node);\n  setFillOpacity(ctx, node);\n  setOpacity(ctx, node);\n  applyTransformations(ctx, node);\n  renderNode$1(ctx, node);\n  draw(ctx, node);\n};\nconst clipPath = (ctx, node) => {\n  var _node$props14;\n  const value = (_node$props14 = node.props) === null || _node$props14 === void 0 ? void 0 : _node$props14.clipPath;\n  if (value) {\n    const children = value.children || [];\n    children.forEach(child => renderNode$1(ctx, child));\n    ctx.clip();\n  }\n};\nconst drawChildren = (ctx, node) => {\n  const children = node.children || [];\n  children.forEach(child => {\n    ctx.save();\n    clipPath(ctx, child);\n    drawNode(ctx, child);\n    drawChildren(ctx, child);\n    ctx.restore();\n  });\n};\nconst resolveAspectRatio = (ctx, node) => {\n  const {\n    width,\n    height\n  } = node.box;\n  const {\n    viewBox,\n    preserveAspectRatio = {}\n  } = node.props;\n  const {\n    meetOrSlice = 'meet',\n    align = 'xMidYMid'\n  } = preserveAspectRatio;\n  if (viewBox == null || width == null || height == null) return;\n  const x = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.minX) || 0;\n  const y = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.minY) || 0;\n  const logicalWidth = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.maxX) || width;\n  const logicalHeight = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.maxY) || height;\n  const logicalRatio = logicalWidth / logicalHeight;\n  const physicalRatio = width / height;\n  const scaleX = width / logicalWidth;\n  const scaleY = height / logicalHeight;\n  if (align === 'none') {\n    ctx.scale(scaleX, scaleY);\n    ctx.translate(-x, -y);\n    return;\n  }\n  if (logicalRatio < physicalRatio && meetOrSlice === 'meet' || logicalRatio >= physicalRatio && meetOrSlice === 'slice') {\n    ctx.scale(scaleY, scaleY);\n    switch (align) {\n      case 'xMinYMin':\n      case 'xMinYMid':\n      case 'xMinYMax':\n        ctx.translate(-x, -y);\n        break;\n      case 'xMidYMin':\n      case 'xMidYMid':\n      case 'xMidYMax':\n        ctx.translate(-x - (logicalWidth - width * logicalHeight / height) / 2, -y);\n        break;\n      default:\n        ctx.translate(-x - (logicalWidth - width * logicalHeight / height), -y);\n    }\n  } else {\n    ctx.scale(scaleX, scaleX);\n    switch (align) {\n      case 'xMinYMin':\n      case 'xMidYMin':\n      case 'xMaxYMin':\n        ctx.translate(-x, -y);\n        break;\n      case 'xMinYMid':\n      case 'xMidYMid':\n      case 'xMaxYMid':\n        ctx.translate(-x, -y - (logicalHeight - height * logicalWidth / width) / 2);\n        break;\n      default:\n        ctx.translate(-x, -y - (logicalHeight - height * logicalWidth / width));\n    }\n  }\n};\nconst moveToOrigin = (ctx, node) => {\n  const {\n    top,\n    left\n  } = node.box;\n  const paddingLeft = node.box.paddingLeft || 0;\n  const paddingTop = node.box.paddingTop || 0;\n  ctx.translate(left + paddingLeft, top + paddingTop);\n};\nconst renderSvg = (ctx, node) => {\n  ctx.save();\n  clipNode(ctx, node);\n  moveToOrigin(ctx, node);\n  resolveAspectRatio(ctx, node);\n  drawChildren(ctx, node);\n  ctx.restore();\n};\n\nconst black = {\n  value: [0, 0, 0],\n  opacity: 1\n};\nconst parseColor = hex => {\n  const parsed = colorString.get(hex);\n  if (!parsed) return black;\n  const value = colorString.to.hex(parsed.value.slice(0, 3));\n  const opacity = parsed.value[3];\n  return {\n    value,\n    opacity\n  };\n};\n\n/* eslint-disable no-param-reassign */\nconst DEST_REGEXP = /^#.+/;\nconst isSrcId$1 = src => src.match(DEST_REGEXP);\nconst renderAttachment = (ctx, attachment) => {\n  const {\n    xOffset = 0,\n    yOffset = 0,\n    width,\n    height,\n    image\n  } = attachment;\n  ctx.translate(-width + xOffset, -height + yOffset);\n  ctx.image(image, 0, 0, {\n    fit: [width, height],\n    align: 'center',\n    valign: 'bottom'\n  });\n};\nconst renderAttachments = (ctx, run) => {\n  ctx.save();\n  const {\n    font\n  } = run.attributes;\n  const space = font.glyphForCodePoint(0x20);\n  const objectReplacement = font.glyphForCodePoint(0xfffc);\n  let attachmentAdvance = 0;\n  for (let i = 0; i < run.glyphs.length; i += 1) {\n    const position = run.positions[i];\n    const glyph = run.glyphs[i];\n    attachmentAdvance += position.xAdvance || 0;\n    if (glyph.id === objectReplacement.id && run.attributes.attachment) {\n      ctx.translate(attachmentAdvance, position.yOffset || 0);\n      renderAttachment(ctx, run.attributes.attachment);\n      run.glyphs[i] = space;\n      attachmentAdvance = 0;\n    }\n  }\n  ctx.restore();\n};\nconst renderRun = (ctx, run, options) => {\n  const {\n    font,\n    fontSize,\n    link\n  } = run.attributes;\n  const color = parseColor(run.attributes.color);\n  const opacity = isNil(run.attributes.opacity) ? color.opacity : run.attributes.opacity;\n  const {\n    height,\n    descent,\n    xAdvance\n  } = run;\n  if (options.outlineRuns) {\n    ctx.rect(0, -height, xAdvance, height).stroke();\n  }\n  ctx.fillColor(color.value);\n  ctx.fillOpacity(opacity);\n  if (link) {\n    if (isSrcId$1(link)) {\n      ctx.goTo(0, -height - descent, xAdvance, height, link.slice(1));\n    } else {\n      ctx.link(0, -height - descent, xAdvance, height, link);\n    }\n  }\n  renderAttachments(ctx, run);\n  if (font.sbix || font.COLR && font.CPAL) {\n    ctx.save();\n    ctx.translate(0, -run.ascent);\n    for (let i = 0; i < run.glyphs.length; i += 1) {\n      const position = run.positions[i];\n      const glyph = run.glyphs[i];\n      ctx.save();\n      ctx.translate(position.xOffset, position.yOffset);\n      glyph.render(ctx, fontSize);\n      ctx.restore();\n      ctx.translate(position.xAdvance, position.yAdvance);\n    }\n    ctx.restore();\n  } else {\n    ctx.font(typeof font.name === 'string' ? font.name : font, fontSize);\n    try {\n      renderGlyphs(ctx, run.glyphs, run.positions, 0, 0);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  ctx.translate(xAdvance, 0);\n};\nconst renderBackground$1 = (ctx, rect, backgroundColor) => {\n  const color = parseColor(backgroundColor);\n  ctx.save();\n  ctx.fillOpacity(color.opacity);\n  ctx.rect(rect.x, rect.y, rect.width, rect.height);\n  ctx.fill(color.value);\n  ctx.restore();\n};\nconst renderDecorationLine = (ctx, line) => {\n  ctx.save();\n  ctx.lineWidth(line.rect.height);\n  ctx.strokeOpacity(line.opacity);\n  if (/dashed/.test(line.style)) {\n    ctx.dash(3 * line.rect.height);\n  } else if (/dotted/.test(line.style)) {\n    ctx.dash(line.rect.height);\n  }\n  if (/wavy/.test(line.style)) {\n    const dist = Math.max(2, line.rect.height);\n    let step = 1.1 * dist;\n    const stepCount = Math.floor(line.rect.width / (2 * step));\n\n    // Adjust step to fill entire width\n    const remainingWidth = line.rect.width - stepCount * 2 * step;\n    const adjustment = remainingWidth / stepCount / 2;\n    step += adjustment;\n    const cp1y = line.rect.y + dist;\n    const cp2y = line.rect.y - dist;\n    let {\n      x\n    } = line.rect;\n    ctx.moveTo(line.rect.x, line.rect.y);\n    for (let i = 0; i < stepCount; i += 1) {\n      ctx.bezierCurveTo(x + step, cp1y, x + step, cp2y, x + 2 * step, line.rect.y);\n      x += 2 * step;\n    }\n  } else {\n    ctx.moveTo(line.rect.x, line.rect.y);\n    ctx.lineTo(line.rect.x + line.rect.width, line.rect.y);\n    if (/double/.test(line.style)) {\n      ctx.moveTo(line.rect.x, line.rect.y + line.rect.height * 2);\n      ctx.lineTo(line.rect.x + line.rect.width, line.rect.y + line.rect.height * 2);\n    }\n  }\n  ctx.stroke(line.color);\n  ctx.restore();\n};\nconst renderLine = (ctx, line, options) => {\n  const lineAscent = line.ascent;\n  if (options.outlineLines) {\n    ctx.rect(line.box.x, line.box.y, line.box.width, line.box.height).stroke();\n  }\n  ctx.save();\n  ctx.translate(line.box.x, line.box.y + lineAscent);\n  for (let i = 0; i < line.runs.length; i += 1) {\n    const run = line.runs[i];\n    const isLastRun = i === line.runs.length - 1;\n    if (run.attributes.backgroundColor) {\n      const overflowRight = isLastRun ? line.overflowRight : 0;\n      const backgroundRect = {\n        x: 0,\n        y: -lineAscent,\n        height: line.box.height,\n        width: run.xAdvance - overflowRight\n      };\n      renderBackground$1(ctx, backgroundRect, run.attributes.backgroundColor);\n    }\n    renderRun(ctx, run, options);\n  }\n  ctx.restore();\n  ctx.save();\n  ctx.translate(line.box.x, line.box.y);\n  for (let i = 0; i < line.decorationLines.length; i += 1) {\n    const decorationLine = line.decorationLines[i];\n    renderDecorationLine(ctx, decorationLine);\n  }\n  ctx.restore();\n};\nconst renderBlock = (ctx, block, options) => {\n  block.forEach(line => {\n    renderLine(ctx, line, options);\n  });\n};\nconst renderText = (ctx, node) => {\n  var _node$box, _node$box2;\n  const {\n    top,\n    left\n  } = node.box;\n  const blocks = [node.lines];\n  const paddingTop = ((_node$box = node.box) === null || _node$box === void 0 ? void 0 : _node$box.paddingTop) || 0;\n  const paddingLeft = ((_node$box2 = node.box) === null || _node$box2 === void 0 ? void 0 : _node$box2.paddingLeft) || 0;\n  const initialY = node.lines[0] ? node.lines[0].box.y : 0;\n  const offsetX = node.alignOffset || 0;\n  ctx.save();\n  ctx.translate(left + paddingLeft - offsetX, top + paddingTop - initialY);\n  blocks.forEach(block => {\n    renderBlock(ctx, block, {});\n  });\n  ctx.restore();\n};\n\nconst renderPage = (ctx, node) => {\n  var _node$props;\n  const {\n    width,\n    height\n  } = node.box;\n  const dpi = ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.dpi) || 72;\n  const userUnit = dpi / 72;\n  ctx.addPage({\n    size: [width, height],\n    margin: 0,\n    userUnit\n  });\n};\n\nconst renderNote = (ctx, node) => {\n  var _node$children, _node$style, _node$style2;\n  const {\n    top,\n    left\n  } = node.box;\n  const value = (node === null || node === void 0 ? void 0 : (_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children[0].value) || '';\n  const color = ((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.backgroundColor) || null;\n  const borderWidth = ((_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2.borderWidth) || null;\n  ctx.note(left, top, 0, 0, value, {\n    color,\n    borderWidth\n  });\n};\n\nconst isNumeric = n => {\n  return !Number.isNaN(parseFloat(n)) && Number.isFinite(n);\n};\nconst applyContainObjectFit = (cw, ch, iw, ih, px, py) => {\n  const cr = cw / ch;\n  const ir = iw / ih;\n  const pxp = matchPercent(px);\n  const pyp = matchPercent(py);\n  const pxv = pxp ? pxp.percent : 0.5;\n  const pyv = pyp ? pyp.percent : 0.5;\n  if (cr > ir) {\n    const height = ch;\n    const width = height * ir;\n    const yOffset = isNumeric(py) ? py : 0;\n    const xOffset = isNumeric(px) ? px : (cw - width) * pxv;\n    return {\n      width,\n      height,\n      xOffset,\n      yOffset\n    };\n  }\n  const width = cw;\n  const height = width / ir;\n  const xOffset = isNumeric(px) ? px : 0;\n  const yOffset = isNumeric(py) ? py : (ch - height) * pyv;\n  return {\n    width,\n    height,\n    yOffset,\n    xOffset\n  };\n};\nconst applyNoneObjectFit = (cw, ch, iw, ih, px, py) => {\n  const width = iw;\n  const height = ih;\n  const pxp = matchPercent(px);\n  const pyp = matchPercent(py);\n  const pxv = pxp ? pxp.percent : 0.5;\n  const pyv = pyp ? pyp.percent : 0.5;\n  const xOffset = isNumeric(px) ? px : (cw - width) * pxv;\n  const yOffset = isNumeric(py) ? py : (ch - height) * pyv;\n  return {\n    width,\n    height,\n    xOffset,\n    yOffset\n  };\n};\nconst applyCoverObjectFit = (cw, ch, iw, ih, px, py) => {\n  const ir = iw / ih;\n  const cr = cw / ch;\n  const pxp = matchPercent(px);\n  const pyp = matchPercent(py);\n  const pxv = pxp ? pxp.percent : 0.5;\n  const pyv = pyp ? pyp.percent : 0.5;\n  if (cr > ir) {\n    const width = cw;\n    const height = width / ir;\n    const xOffset = isNumeric(px) ? px : 0;\n    const yOffset = isNumeric(py) ? py : (ch - height) * pyv;\n    return {\n      width,\n      height,\n      yOffset,\n      xOffset\n    };\n  }\n  const height = ch;\n  const width = height * ir;\n  const xOffset = isNumeric(px) ? px : (cw - width) * pxv;\n  const yOffset = isNumeric(py) ? py : 0;\n  return {\n    width,\n    height,\n    xOffset,\n    yOffset\n  };\n};\nconst applyScaleDownObjectFit = (cw, ch, iw, ih, px, py) => {\n  const containDimension = applyContainObjectFit(cw, ch, iw, ih, px, py);\n  const noneDimension = applyNoneObjectFit(cw, ch, iw, ih, px, py);\n  return containDimension.width < noneDimension.width ? containDimension : noneDimension;\n};\nconst applyFillObjectFit = (cw, ch, px, py) => {\n  return {\n    width: cw,\n    height: ch,\n    xOffset: matchPercent(px) ? 0 : px || 0,\n    yOffset: matchPercent(py) ? 0 : py || 0\n  };\n};\nconst resolveObjectFit = function (type, cw, ch, iw, ih, px, py) {\n  if (type === void 0) {\n    type = 'fill';\n  }\n  switch (type) {\n    case 'contain':\n      return applyContainObjectFit(cw, ch, iw, ih, px, py);\n    case 'cover':\n      return applyCoverObjectFit(cw, ch, iw, ih, px, py);\n    case 'none':\n      return applyNoneObjectFit(cw, ch, iw, ih, px, py);\n    case 'scale-down':\n      return applyScaleDownObjectFit(cw, ch, iw, ih, px, py);\n    default:\n      return applyFillObjectFit(cw, ch, px, py);\n  }\n};\n\nconst drawImage = function (ctx, node, options) {\n  var _node$style, _node$style2, _node$style3, _node$style4;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    left,\n    top\n  } = node.box;\n  const opacity = (_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.opacity;\n  const objectFit = (_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2.objectFit;\n  const objectPositionX = (_node$style3 = node.style) === null || _node$style3 === void 0 ? void 0 : _node$style3.objectPositionX;\n  const objectPositionY = (_node$style4 = node.style) === null || _node$style4 === void 0 ? void 0 : _node$style4.objectPositionY;\n  const paddingTop = node.box.paddingTop || 0;\n  const paddingRight = node.box.paddingRight || 0;\n  const paddingBottom = node.box.paddingBottom || 0;\n  const paddingLeft = node.box.paddingLeft || 0;\n  const imageCache = options.imageCache || new Map();\n  const {\n    width,\n    height,\n    xOffset,\n    yOffset\n  } = resolveObjectFit(objectFit, node.box.width - paddingLeft - paddingRight, node.box.height - paddingTop - paddingBottom, node.image.width, node.image.height, objectPositionX, objectPositionY);\n  if (node.image.data) {\n    if (width !== 0 && height !== 0) {\n      const cacheKey = node.image.key;\n      const image = imageCache.get(cacheKey) || ctx.embedImage(node.image.data);\n      if (cacheKey) imageCache.set(cacheKey, image);\n      const imageOpacity = isNil(opacity) ? 1 : opacity;\n      ctx.fillOpacity(imageOpacity).image(image, left + paddingLeft + xOffset, top + paddingTop + yOffset, {\n        width,\n        height\n      });\n    } else {\n      console.warn(`Image with src '${JSON.stringify(node.props.src)}' skipped due to invalid dimensions`);\n    }\n  }\n};\nconst renderImage = (ctx, node, options) => {\n  ctx.save();\n  clipNode(ctx, node);\n  drawImage(ctx, node, options);\n  ctx.restore();\n};\n\nconst CONTENT_COLOR = '#a1c6e7';\nconst PADDING_COLOR = '#c4deb9';\nconst MARGIN_COLOR = '#f8cca1';\n\n// TODO: Draw debug boxes using clipping to enhance quality\n\nconst debugContent = (ctx, node) => {\n  const {\n    left,\n    top,\n    width,\n    height,\n    paddingLeft = 0,\n    paddingTop = 0,\n    paddingRight = 0,\n    paddingBottom = 0,\n    borderLeftWidth = 0,\n    borderTopWidth = 0,\n    borderRightWidth = 0,\n    borderBottomWidth = 0\n  } = node.box;\n  ctx.fillColor(CONTENT_COLOR).opacity(0.5).rect(left + paddingLeft + borderLeftWidth, top + paddingTop + borderTopWidth, width - paddingLeft - paddingRight - borderRightWidth - borderLeftWidth, height - paddingTop - paddingBottom - borderTopWidth - borderBottomWidth).fill();\n};\nconst debugPadding = (ctx, node) => {\n  const {\n    left,\n    top,\n    width,\n    height,\n    paddingLeft = 0,\n    paddingTop = 0,\n    paddingRight = 0,\n    paddingBottom = 0,\n    borderLeftWidth = 0,\n    borderTopWidth = 0,\n    borderRightWidth = 0,\n    borderBottomWidth = 0\n  } = node.box;\n  ctx.fillColor(PADDING_COLOR).opacity(0.5);\n\n  // Padding top\n  ctx.rect(left + paddingLeft + borderLeftWidth, top + borderTopWidth, width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth, paddingTop).fill();\n\n  // Padding left\n  ctx.rect(left + borderLeftWidth, top + borderTopWidth, paddingLeft, height - borderTopWidth - borderBottomWidth).fill();\n\n  // Padding right\n  ctx.rect(left + width - paddingRight - borderRightWidth, top + borderTopWidth, paddingRight, height - borderTopWidth - borderBottomWidth).fill();\n\n  // Padding bottom\n  ctx.rect(left + paddingLeft + borderLeftWidth, top + height - paddingBottom - borderBottomWidth, width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth, paddingBottom).fill();\n};\nconst getMargin = box => {\n  const marginLeft = box.marginLeft === 'auto' ? 0 : box.marginLeft;\n  const marginTop = box.marginTop === 'auto' ? 0 : box.marginTop;\n  const marginRight = box.marginRight === 'auto' ? 0 : box.marginRight;\n  const marginBottom = box.marginBottom === 'auto' ? 0 : box.marginBottom;\n  return {\n    marginLeft,\n    marginTop,\n    marginRight,\n    marginBottom\n  };\n};\nconst debugMargin = (ctx, node) => {\n  const {\n    left,\n    top,\n    width,\n    height\n  } = node.box;\n  const {\n    marginLeft = 0,\n    marginTop = 0,\n    marginRight = 0,\n    marginBottom = 0\n  } = getMargin(node.box);\n  ctx.fillColor(MARGIN_COLOR).opacity(0.5);\n\n  // Margin top\n  ctx.rect(left, top - marginTop, width, marginTop).fill();\n\n  // Margin left\n  ctx.rect(left - marginLeft, top - marginTop, marginLeft, height + marginTop + marginBottom).fill();\n\n  // Margin right\n  ctx.rect(left + width, top - marginTop, marginRight, height + marginTop + marginBottom).fill();\n\n  // Margin bottom\n  ctx.rect(left, top + height, width, marginBottom).fill();\n};\nconst debugText = (ctx, node) => {\n  const {\n    left,\n    top,\n    width,\n    height\n  } = node.box;\n  const {\n    marginLeft = 0,\n    marginTop = 0,\n    marginRight = 0,\n    marginBottom = 0\n  } = getMargin(node.box);\n  const roundedWidth = Math.round(width + marginLeft + marginRight);\n  const roundedHeight = Math.round(height + marginTop + marginBottom);\n  ctx.fontSize(6).opacity(1).fillColor('black').text(`${roundedWidth} x ${roundedHeight}`, left - marginLeft, Math.max(top - marginTop - 4, 1));\n};\nconst debugOrigin = (ctx, node) => {\n  if (node.origin) {\n    ctx.circle(node.origin.left, node.origin.top, 3).fill('red').circle(node.origin.left, node.origin.top, 5).stroke('red');\n  }\n};\nconst renderDebug = (ctx, node) => {\n  var _node$props;\n  if (!((_node$props = node.props) !== null && _node$props !== void 0 && _node$props.debug)) return;\n  ctx.save();\n  debugContent(ctx, node);\n  debugPadding(ctx, node);\n  debugMargin(ctx, node);\n  debugText(ctx, node);\n  debugOrigin(ctx, node);\n  ctx.restore();\n};\n\nconst availableMethods = ['dash', 'clip', 'save', 'path', 'fill', 'font', 'text', 'rect', 'scale', 'moveTo', 'lineTo', 'stroke', 'rotate', 'circle', 'lineCap', 'opacity', 'ellipse', 'polygon', 'restore', 'lineJoin', 'fontSize', 'fillColor', 'lineWidth', 'translate', 'miterLimit', 'strokeColor', 'fillOpacity', 'roundedRect', 'fillAndStroke', 'strokeOpacity', 'bezierCurveTo', 'quadraticCurveTo', 'linearGradient', 'radialGradient'];\nconst painter = ctx => {\n  const p = availableMethods.reduce((acc, prop) => ({\n    ...acc,\n    [prop]: function () {\n      ctx[prop](...arguments);\n      return p;\n    }\n  }), {});\n  return p;\n};\nconst renderCanvas = (ctx, node) => {\n  const {\n    top,\n    left,\n    width,\n    height\n  } = node.box;\n  const paddingTop = node.box.paddingTop || 0;\n  const paddingLeft = node.box.paddingLeft || 0;\n  const paddingRight = node.box.paddingRight || 0;\n  const paddingBottom = node.box.paddingBottom || 0;\n  const availableWidth = width - paddingLeft - paddingRight;\n  const availableHeight = height - paddingTop - paddingBottom;\n  if (!availableWidth || !availableHeight) {\n    console.warn('Canvas element has null width or height. Please provide valid values via the `style` prop in order to correctly render it.');\n  }\n  ctx.save().translate(left + paddingLeft, top + paddingTop);\n  if (node.props.paint) {\n    node.props.paint(painter(ctx), availableWidth, availableHeight);\n  }\n  ctx.restore();\n};\n\n// Ref: https://www.w3.org/TR/css-backgrounds-3/#borders\n\n// This constant is used to approximate a symmetrical arc using a cubic Bezier curve.\nconst KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nconst clipBorderTop = (ctx, layout, style, rtr, rtl) => {\n  const {\n    top,\n    left,\n    width,\n    height\n  } = layout;\n  const {\n    borderTopWidth,\n    borderRightWidth,\n    borderLeftWidth\n  } = style;\n\n  // Clip outer top border edge\n  ctx.moveTo(left + rtl, top);\n  ctx.lineTo(left + width - rtr, top);\n\n  // Ellipse coefficients outer top right cap\n  const c0 = rtr * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(left + width - c0, top, left + width, top + c0, left + width, top + rtr);\n\n  // Move down in case the margin exceedes the radius\n  const topRightYCoord = top + Math.max(borderTopWidth, rtr);\n  ctx.lineTo(left + width, topRightYCoord);\n\n  // Clip inner top right cap\n  ctx.lineTo(left + width - borderRightWidth, topRightYCoord);\n\n  // Ellipse coefficients inner top right cap\n  const innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  const innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  const c1 = innerTopRightRadiusX * (1.0 - KAPPA);\n  const c2 = innerTopRightRadiusY * (1.0 - KAPPA);\n\n  // Clip inner top right cap\n  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c2, left + width - borderRightWidth - c1, top + borderTopWidth, left + width - borderRightWidth - innerTopRightRadiusX, top + borderTopWidth);\n\n  // Clip inner top border edge\n  ctx.lineTo(left + Math.max(rtl, borderLeftWidth), top + borderTopWidth);\n\n  // Ellipse coefficients inner top left cap\n  const innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  const innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  const c3 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  const c4 = innerTopLeftRadiusY * (1.0 - KAPPA);\n  const topLeftYCoord = top + Math.max(borderTopWidth, rtl);\n\n  // Clip inner top left cap\n  ctx.bezierCurveTo(left + borderLeftWidth + c3, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c4, left + borderLeftWidth, topLeftYCoord);\n  ctx.lineTo(left, topLeftYCoord);\n\n  // Move down in case the margin exceedes the radius\n  ctx.lineTo(left, top + rtl);\n\n  // Ellipse coefficients outer top left cap\n  const c5 = rtl * (1.0 - KAPPA);\n\n  // Clip outer top left cap\n  ctx.bezierCurveTo(left, top + c5, left + c5, top, left + rtl, top);\n  ctx.closePath();\n  ctx.clip();\n\n  // Clip border top cap joins\n  if (borderRightWidth) {\n    const trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n  if (borderLeftWidth) {\n    const trSlope = -borderTopWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\nconst fillBorderTop = (ctx, layout, style, rtr, rtl) => {\n  const {\n    top,\n    left,\n    width\n  } = layout;\n  const {\n    borderTopColor,\n    borderTopWidth,\n    borderTopStyle,\n    borderRightWidth,\n    borderLeftWidth\n  } = style;\n  const c0 = rtl * (1.0 - KAPPA);\n  const c1 = rtr * (1.0 - KAPPA);\n  ctx.moveTo(left, top + Math.max(rtl, borderTopWidth));\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);\n  ctx.lineTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);\n  ctx.strokeColor(borderTopColor);\n  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderLeftWidth) * 2);\n  if (borderTopStyle === 'dashed') {\n    ctx.dash(borderTopWidth * 2, {\n      space: borderTopWidth * 1.2\n    });\n  } else if (borderTopStyle === 'dotted') {\n    ctx.dash(borderTopWidth, {\n      space: borderTopWidth * 1.2\n    });\n  }\n  ctx.stroke();\n  ctx.undash();\n};\nconst clipBorderRight = (ctx, layout, style, rtr, rbr) => {\n  const {\n    top,\n    left,\n    width,\n    height\n  } = layout;\n  const {\n    borderTopWidth,\n    borderRightWidth,\n    borderBottomWidth\n  } = style;\n\n  // Clip outer right border edge\n  ctx.moveTo(left + width, top + rtr);\n  ctx.lineTo(left + width, top + height - rbr);\n\n  // Ellipse coefficients outer bottom right cap\n  const c0 = rbr * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height);\n\n  // Move left in case the margin exceedes the radius\n  const topBottomXCoord = left + width - Math.max(borderRightWidth, rbr);\n  ctx.lineTo(topBottomXCoord, top + height);\n\n  // Clip inner bottom right cap\n  ctx.lineTo(topBottomXCoord, top + height - borderBottomWidth);\n\n  // Ellipse coefficients inner bottom right cap\n  const innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  const innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  const c1 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  const c2 = innerBottomRightRadiusY * (1.0 - KAPPA);\n\n  // Clip inner top right cap\n  ctx.bezierCurveTo(left + width - borderRightWidth - c1, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c2, left + width - borderRightWidth, top + height - Math.max(rbr, borderBottomWidth));\n\n  // Clip inner right border edge\n  ctx.lineTo(left + width - borderRightWidth, top + Math.max(rtr, borderTopWidth));\n\n  // Ellipse coefficients inner top right cap\n  const innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  const innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  const c3 = innerTopRightRadiusX * (1.0 - KAPPA);\n  const c4 = innerTopRightRadiusY * (1.0 - KAPPA);\n  const topRightXCoord = left + width - Math.max(rtr, borderRightWidth);\n\n  // Clip inner top left cap\n  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c4, left + width - borderRightWidth - c3, top + borderTopWidth, topRightXCoord, top + borderTopWidth);\n  ctx.lineTo(topRightXCoord, top);\n\n  // Move right in case the margin exceedes the radius\n  ctx.lineTo(left + width - rtr, top);\n\n  // Ellipse coefficients outer top right cap\n  const c5 = rtr * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(left + width - c5, top, left + width, top + c5, left + width, top + rtr);\n  ctx.closePath();\n  ctx.clip();\n\n  // Clip border right cap joins\n  if (borderTopWidth) {\n    const trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n  if (borderBottomWidth) {\n    const brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\nconst fillBorderRight = (ctx, layout, style, rtr, rbr) => {\n  const {\n    top,\n    left,\n    width,\n    height\n  } = layout;\n  const {\n    borderRightColor,\n    borderRightStyle,\n    borderRightWidth,\n    borderTopWidth,\n    borderBottomWidth\n  } = style;\n  const c0 = rbr * (1.0 - KAPPA);\n  const c1 = rtr * (1.0 - KAPPA);\n  ctx.moveTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);\n  ctx.lineTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height);\n  ctx.strokeColor(borderRightColor);\n  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderBottomWidth) * 2);\n  if (borderRightStyle === 'dashed') {\n    ctx.dash(borderRightWidth * 2, {\n      space: borderRightWidth * 1.2\n    });\n  } else if (borderRightStyle === 'dotted') {\n    ctx.dash(borderRightWidth, {\n      space: borderRightWidth * 1.2\n    });\n  }\n  ctx.stroke();\n  ctx.undash();\n};\nconst clipBorderBottom = (ctx, layout, style, rbl, rbr) => {\n  const {\n    top,\n    left,\n    width,\n    height\n  } = layout;\n  const {\n    borderBottomWidth,\n    borderRightWidth,\n    borderLeftWidth\n  } = style;\n\n  // Clip outer top border edge\n  ctx.moveTo(left + width - rbr, top + height);\n  ctx.lineTo(left + rbl, top + height);\n\n  // Ellipse coefficients outer top right cap\n  const c0 = rbl * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n\n  // Move up in case the margin exceedes the radius\n  const bottomLeftYCoord = top + height - Math.max(borderBottomWidth, rbl);\n  ctx.lineTo(left, bottomLeftYCoord);\n\n  // Clip inner bottom left cap\n  ctx.lineTo(left + borderLeftWidth, bottomLeftYCoord);\n\n  // Ellipse coefficients inner top right cap\n  const innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  const innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  const c1 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  const c2 = innerBottomLeftRadiusY * (1.0 - KAPPA);\n\n  // Clip inner bottom left cap\n  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c2, left + borderLeftWidth + c1, top + height - borderBottomWidth, left + borderLeftWidth + innerBottomLeftRadiusX, top + height - borderBottomWidth);\n\n  // Clip inner bottom border edge\n  ctx.lineTo(left + width - Math.max(rbr, borderRightWidth), top + height - borderBottomWidth);\n\n  // Ellipse coefficients inner top left cap\n  const innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  const innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  const c3 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  const c4 = innerBottomRightRadiusY * (1.0 - KAPPA);\n  const bottomRightYCoord = top + height - Math.max(borderBottomWidth, rbr);\n\n  // Clip inner top left cap\n  ctx.bezierCurveTo(left + width - borderRightWidth - c3, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c4, left + width - borderRightWidth, bottomRightYCoord);\n  ctx.lineTo(left + width, bottomRightYCoord);\n\n  // Move down in case the margin exceedes the radius\n  ctx.lineTo(left + width, top + height - rbr);\n\n  // Ellipse coefficients outer top left cap\n  const c5 = rbr * (1.0 - KAPPA);\n\n  // Clip outer top left cap\n  ctx.bezierCurveTo(left + width, top + height - c5, left + width - c5, top + height, left + width - rbr, top + height);\n  ctx.closePath();\n  ctx.clip();\n\n  // Clip border bottom cap joins\n  if (borderRightWidth) {\n    const brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n  if (borderLeftWidth) {\n    const trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\nconst fillBorderBottom = (ctx, layout, style, rbl, rbr) => {\n  const {\n    top,\n    left,\n    width,\n    height\n  } = layout;\n  const {\n    borderBottomColor,\n    borderBottomStyle,\n    borderBottomWidth,\n    borderRightWidth,\n    borderLeftWidth\n  } = style;\n  const c0 = rbl * (1.0 - KAPPA);\n  const c1 = rbr * (1.0 - KAPPA);\n  ctx.moveTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - c1, left + width - c1, top + height, left + width - rbr, top + height);\n  ctx.lineTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n  ctx.strokeColor(borderBottomColor);\n  ctx.lineWidth(Math.max(borderBottomWidth, borderRightWidth, borderLeftWidth) * 2);\n  if (borderBottomStyle === 'dashed') {\n    ctx.dash(borderBottomWidth * 2, {\n      space: borderBottomWidth * 1.2\n    });\n  } else if (borderBottomStyle === 'dotted') {\n    ctx.dash(borderBottomWidth, {\n      space: borderBottomWidth * 1.2\n    });\n  }\n  ctx.stroke();\n  ctx.undash();\n};\nconst clipBorderLeft = (ctx, layout, style, rbl, rtl) => {\n  const {\n    top,\n    left,\n    width,\n    height\n  } = layout;\n  const {\n    borderTopWidth,\n    borderLeftWidth,\n    borderBottomWidth\n  } = style;\n\n  // Clip outer left border edge\n  ctx.moveTo(left, top + height - rbl);\n  ctx.lineTo(left, top + rtl);\n\n  // Ellipse coefficients outer top left cap\n  const c0 = rtl * (1.0 - KAPPA);\n\n  // Clip outer top left cap\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);\n\n  // Move right in case the margin exceedes the radius\n  const topLeftCoordX = left + Math.max(borderLeftWidth, rtl);\n  ctx.lineTo(topLeftCoordX, top);\n\n  // Clip inner top left cap\n  ctx.lineTo(topLeftCoordX, top + borderTopWidth);\n\n  // Ellipse coefficients inner top left cap\n  const innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  const innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  const c1 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  const c2 = innerTopLeftRadiusY * (1.0 - KAPPA);\n\n  // Clip inner top right cap\n  ctx.bezierCurveTo(left + borderLeftWidth + c1, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c2, left + borderLeftWidth, top + Math.max(rtl, borderTopWidth));\n\n  // Clip inner left border edge\n  ctx.lineTo(left + borderLeftWidth, top + height - Math.max(rbl, borderBottomWidth));\n\n  // Ellipse coefficients inner bottom left cap\n  const innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  const innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  const c3 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  const c4 = innerBottomLeftRadiusY * (1.0 - KAPPA);\n  const bottomLeftXCoord = left + Math.max(rbl, borderLeftWidth);\n\n  // Clip inner top left cap\n  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c4, left + borderLeftWidth + c3, top + height - borderBottomWidth, bottomLeftXCoord, top + height - borderBottomWidth);\n  ctx.lineTo(bottomLeftXCoord, top + height);\n\n  // Move left in case the margin exceedes the radius\n  ctx.lineTo(left + rbl, top + height);\n\n  // Ellipse coefficients outer top right cap\n  const c5 = rbl * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(left + c5, top + height, left, top + height - c5, left, top + height - rbl);\n  ctx.closePath();\n  ctx.clip();\n\n  // Clip border right cap joins\n  if (borderBottomWidth) {\n    const trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n  if (borderBottomWidth) {\n    const trSlope = -borderTopWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\nconst fillBorderLeft = (ctx, layout, style, rbl, rtl) => {\n  const {\n    top,\n    left,\n    height\n  } = layout;\n  const {\n    borderLeftColor,\n    borderLeftStyle,\n    borderLeftWidth,\n    borderTopWidth,\n    borderBottomWidth\n  } = style;\n  const c0 = rbl * (1.0 - KAPPA);\n  const c1 = rtl * (1.0 - KAPPA);\n  ctx.moveTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n  ctx.lineTo(left, top + rtl);\n  ctx.bezierCurveTo(left, top + c1, left + c1, top, left + rtl, top);\n  ctx.strokeColor(borderLeftColor);\n  ctx.lineWidth(Math.max(borderLeftWidth, borderTopWidth, borderBottomWidth) * 2);\n  if (borderLeftStyle === 'dashed') {\n    ctx.dash(borderLeftWidth * 2, {\n      space: borderLeftWidth * 1.2\n    });\n  } else if (borderLeftStyle === 'dotted') {\n    ctx.dash(borderLeftWidth, {\n      space: borderLeftWidth * 1.2\n    });\n  }\n  ctx.stroke();\n  ctx.undash();\n};\nconst shouldRenderBorders = node => node.box && (node.box.borderTopWidth || node.box.borderRightWidth || node.box.borderBottomWidth || node.box.borderLeftWidth);\nconst renderBorders = (ctx, node) => {\n  if (!shouldRenderBorders(node)) return;\n  const {\n    width,\n    height,\n    borderTopWidth,\n    borderLeftWidth,\n    borderRightWidth,\n    borderBottomWidth\n  } = node.box;\n  const {\n    opacity,\n    borderTopLeftRadius = 0,\n    borderTopRightRadius = 0,\n    borderBottomLeftRadius = 0,\n    borderBottomRightRadius = 0,\n    borderTopColor = 'black',\n    borderTopStyle = 'solid',\n    borderLeftColor = 'black',\n    borderLeftStyle = 'solid',\n    borderRightColor = 'black',\n    borderRightStyle = 'solid',\n    borderBottomColor = 'black',\n    borderBottomStyle = 'solid'\n  } = node.style;\n  const style = {\n    borderTopColor,\n    borderTopWidth,\n    borderTopStyle,\n    borderLeftColor,\n    borderLeftWidth,\n    borderLeftStyle,\n    borderRightColor,\n    borderRightWidth,\n    borderRightStyle,\n    borderBottomColor,\n    borderBottomWidth,\n    borderBottomStyle,\n    borderTopLeftRadius,\n    borderTopRightRadius,\n    borderBottomLeftRadius,\n    borderBottomRightRadius\n  };\n  const rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n  const rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n  const rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n  const rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n  ctx.save();\n  ctx.strokeOpacity(opacity);\n  if (borderTopWidth) {\n    ctx.save();\n    clipBorderTop(ctx, node.box, style, rtr, rtl);\n    fillBorderTop(ctx, node.box, style, rtr, rtl);\n    ctx.restore();\n  }\n  if (borderRightWidth) {\n    ctx.save();\n    clipBorderRight(ctx, node.box, style, rtr, rbr);\n    fillBorderRight(ctx, node.box, style, rtr, rbr);\n    ctx.restore();\n  }\n  if (borderBottomWidth) {\n    ctx.save();\n    clipBorderBottom(ctx, node.box, style, rbl, rbr);\n    fillBorderBottom(ctx, node.box, style, rbl, rbr);\n    ctx.restore();\n  }\n  if (borderLeftWidth) {\n    ctx.save();\n    clipBorderLeft(ctx, node.box, style, rbl, rtl);\n    fillBorderLeft(ctx, node.box, style, rbl, rtl);\n    ctx.restore();\n  }\n  ctx.restore();\n};\n\nconst drawBackground = (ctx, node) => {\n  var _node$style;\n  const {\n    top,\n    left,\n    width,\n    height\n  } = node.box;\n  const color = parseColor(node.style.backgroundColor);\n  const nodeOpacity = isNil((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.opacity) ? 1 : node.style.opacity;\n  const opacity = Math.min(color.opacity, nodeOpacity);\n  ctx.fillOpacity(opacity).fillColor(color.value).rect(left, top, width, height).fill();\n};\nconst renderBackground = (ctx, node) => {\n  var _node$style2;\n  const hasBackground = !!node.box && !!((_node$style2 = node.style) !== null && _node$style2 !== void 0 && _node$style2.backgroundColor);\n  if (hasBackground) {\n    ctx.save();\n    clipNode(ctx, node);\n    drawBackground(ctx, node);\n    ctx.restore();\n  }\n};\n\nconst isSrcId = value => /^#.+/.test(value);\nconst setLink = (ctx, node) => {\n  const props = node.props || {};\n  const {\n    top,\n    left,\n    width,\n    height\n  } = node.box;\n  const src = props.src || props.href;\n  if (src) {\n    const isId = isSrcId(src);\n    const method = isId ? 'goTo' : 'link';\n    const value = isId ? src.slice(1) : src;\n    ctx[method](left, top, width, height, value);\n  }\n};\n\nconst setDestination = (ctx, node) => {\n  var _node$props;\n  if ((_node$props = node.props) !== null && _node$props !== void 0 && _node$props.id) {\n    ctx.addNamedDestination(node.props.id, 'XYZ', null, node.box.top, null);\n  }\n};\n\nconst isRecursiveNode = node => node.type !== P.Text && node.type !== P.Svg;\nconst renderChildren = (ctx, node, options) => {\n  ctx.save();\n  if (node.box) {\n    ctx.translate(node.box.left, node.box.top);\n  }\n  const children = node.children || [];\n  const renderChild = child => renderNode(ctx, child, options);\n  children.forEach(renderChild);\n  ctx.restore();\n};\nconst renderFns = {\n  [P.Text]: renderText,\n  [P.Note]: renderNote,\n  [P.Image]: renderImage,\n  [P.Canvas]: renderCanvas,\n  [P.Svg]: renderSvg,\n  [P.Link]: setLink\n};\nconst renderNode = (ctx, node, options) => {\n  var _node$style;\n  const overflowHidden = ((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.overflow) === 'hidden';\n  const shouldRenderChildren = isRecursiveNode(node);\n  if (node.type === P.Page) renderPage(ctx, node);\n  ctx.save();\n  if (overflowHidden) clipNode(ctx, node);\n  applyTransformations(ctx, node);\n  renderBackground(ctx, node);\n  renderBorders(ctx, node);\n  const renderFn = renderFns[node.type];\n  if (renderFn) renderFn(ctx, node, options);\n  if (shouldRenderChildren) renderChildren(ctx, node, options);\n  setDestination(ctx, node);\n  renderDebug(ctx, node);\n  ctx.restore();\n};\n\n/* eslint-disable no-param-reassign */\n\nconst addNodeBookmark = (ctx, node, pageNumber, registry) => {\n  var _node$props;\n  const bookmark = (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.bookmark;\n  if (bookmark) {\n    const {\n      title,\n      parent,\n      expanded,\n      zoom,\n      fit\n    } = bookmark;\n    const outline = registry[parent] || ctx.outline;\n    const top = bookmark.top || node.box.top;\n    const left = bookmark.left || node.box.left;\n    const instance = outline.addItem(title, {\n      pageNumber,\n      expanded,\n      top,\n      left,\n      zoom,\n      fit\n    });\n    registry[bookmark.ref] = instance;\n  }\n  if (!node.children) return;\n  node.children.forEach(child => addNodeBookmark(ctx, child, pageNumber, registry));\n};\nconst addBookmarks = (ctx, root) => {\n  const registry = {};\n  const pages = root.children || [];\n  pages.forEach((page, i) => {\n    addNodeBookmark(ctx, page, i, registry);\n  });\n};\n\nconst render = (ctx, doc) => {\n  const pages = doc.children || [];\n  const options = {\n    imageCache: new Map()\n  };\n  pages.forEach(page => renderNode(ctx, page, options));\n  addBookmarks(ctx, doc);\n  ctx.end();\n  return ctx;\n};\n\nexport { render as default };\n", "var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar TAU = Math.PI * 2;\n\nvar mapToEllipse = function mapToEllipse(_ref, rx, ry, cosphi, sinphi, centerx, centery) {\n  var x = _ref.x,\n      y = _ref.y;\n\n  x *= rx;\n  y *= ry;\n\n  var xp = cosphi * x - sinphi * y;\n  var yp = sinphi * x + cosphi * y;\n\n  return {\n    x: xp + centerx,\n    y: yp + centery\n  };\n};\n\nvar approxUnitArc = function approxUnitArc(ang1, ang2) {\n  // If 90 degree circular arc, use a constant\n  // as derived from http://spencermortensen.com/articles/bezier-circle\n  var a = ang2 === 1.5707963267948966 ? 0.551915024494 : ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);\n\n  var x1 = Math.cos(ang1);\n  var y1 = Math.sin(ang1);\n  var x2 = Math.cos(ang1 + ang2);\n  var y2 = Math.sin(ang1 + ang2);\n\n  return [{\n    x: x1 - y1 * a,\n    y: y1 + x1 * a\n  }, {\n    x: x2 + y2 * a,\n    y: y2 - x2 * a\n  }, {\n    x: x2,\n    y: y2\n  }];\n};\n\nvar vectorAngle = function vectorAngle(ux, uy, vx, vy) {\n  var sign = ux * vy - uy * vx < 0 ? -1 : 1;\n\n  var dot = ux * vx + uy * vy;\n\n  if (dot > 1) {\n    dot = 1;\n  }\n\n  if (dot < -1) {\n    dot = -1;\n  }\n\n  return sign * Math.acos(dot);\n};\n\nvar getArcCenter = function getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp) {\n  var rxsq = Math.pow(rx, 2);\n  var rysq = Math.pow(ry, 2);\n  var pxpsq = Math.pow(pxp, 2);\n  var pypsq = Math.pow(pyp, 2);\n\n  var radicant = rxsq * rysq - rxsq * pypsq - rysq * pxpsq;\n\n  if (radicant < 0) {\n    radicant = 0;\n  }\n\n  radicant /= rxsq * pypsq + rysq * pxpsq;\n  radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n\n  var centerxp = radicant * rx / ry * pyp;\n  var centeryp = radicant * -ry / rx * pxp;\n\n  var centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2;\n  var centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2;\n\n  var vx1 = (pxp - centerxp) / rx;\n  var vy1 = (pyp - centeryp) / ry;\n  var vx2 = (-pxp - centerxp) / rx;\n  var vy2 = (-pyp - centeryp) / ry;\n\n  var ang1 = vectorAngle(1, 0, vx1, vy1);\n  var ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n\n  if (sweepFlag === 0 && ang2 > 0) {\n    ang2 -= TAU;\n  }\n\n  if (sweepFlag === 1 && ang2 < 0) {\n    ang2 += TAU;\n  }\n\n  return [centerx, centery, ang1, ang2];\n};\n\nvar arcToBezier = function arcToBezier(_ref2) {\n  var px = _ref2.px,\n      py = _ref2.py,\n      cx = _ref2.cx,\n      cy = _ref2.cy,\n      rx = _ref2.rx,\n      ry = _ref2.ry,\n      _ref2$xAxisRotation = _ref2.xAxisRotation,\n      xAxisRotation = _ref2$xAxisRotation === undefined ? 0 : _ref2$xAxisRotation,\n      _ref2$largeArcFlag = _ref2.largeArcFlag,\n      largeArcFlag = _ref2$largeArcFlag === undefined ? 0 : _ref2$largeArcFlag,\n      _ref2$sweepFlag = _ref2.sweepFlag,\n      sweepFlag = _ref2$sweepFlag === undefined ? 0 : _ref2$sweepFlag;\n\n  var curves = [];\n\n  if (rx === 0 || ry === 0) {\n    return [];\n  }\n\n  var sinphi = Math.sin(xAxisRotation * TAU / 360);\n  var cosphi = Math.cos(xAxisRotation * TAU / 360);\n\n  var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2;\n  var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2;\n\n  if (pxp === 0 && pyp === 0) {\n    return [];\n  }\n\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n\n  var lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);\n\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda);\n    ry *= Math.sqrt(lambda);\n  }\n\n  var _getArcCenter = getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp),\n      _getArcCenter2 = _slicedToArray(_getArcCenter, 4),\n      centerx = _getArcCenter2[0],\n      centery = _getArcCenter2[1],\n      ang1 = _getArcCenter2[2],\n      ang2 = _getArcCenter2[3];\n\n  // If 'ang2' == 90.0000000001, then `ratio` will evaluate to\n  // 1.0000000001. This causes `segments` to be greater than one, which is an\n  // unecessary split, and adds extra points to the bezier curve. To alleviate\n  // this issue, we round to 1.0 when the ratio is close to 1.0.\n\n\n  var ratio = Math.abs(ang2) / (TAU / 4);\n  if (Math.abs(1.0 - ratio) < 0.0000001) {\n    ratio = 1.0;\n  }\n\n  var segments = Math.max(Math.ceil(ratio), 1);\n\n  ang2 /= segments;\n\n  for (var i = 0; i < segments; i++) {\n    curves.push(approxUnitArc(ang1, ang2));\n    ang1 += ang2;\n  }\n\n  return curves.map(function (curve) {\n    var _mapToEllipse = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centerx, centery),\n        x1 = _mapToEllipse.x,\n        y1 = _mapToEllipse.y;\n\n    var _mapToEllipse2 = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centerx, centery),\n        x2 = _mapToEllipse2.x,\n        y2 = _mapToEllipse2.y;\n\n    var _mapToEllipse3 = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centerx, centery),\n        x = _mapToEllipse3.x,\n        y = _mapToEllipse3.y;\n\n    return { x1: x1, y1: y1, x2: x2, y2: y2, x: x, y: y };\n  });\n};\n\nexport default arcToBezier;", "import arcToCurve from 'svg-arc-to-cubic-bezier'\r\n\r\nexport default function normalize(path){\r\n  // init state\r\n  var prev\r\n  var result = []\r\n  var bezierX = 0\r\n  var bezierY = 0\r\n  var startX = 0\r\n  var startY = 0\r\n  var quadX = null\r\n  var quadY = null\r\n  var x = 0\r\n  var y = 0\r\n\r\n  for (var i = 0, len = path.length; i < len; i++) {\r\n    var seg = path[i]\r\n    var command = seg[0]\r\n\r\n    switch (command) {\r\n      case 'M':\r\n        startX = seg[1]\r\n        startY = seg[2]\r\n        break\r\n      case 'A':\r\n        var curves = arcToCurve({\r\n          px: x,\r\n          py: y,\r\n          cx: seg[6],\r\n          cy:  seg[7],\r\n          rx: seg[1],\r\n          ry: seg[2],\r\n          xAxisRotation: seg[3],\r\n          largeArcFlag: seg[4],\r\n          sweepFlag: seg[5]\r\n        })\r\n\r\n        // null-curves\r\n        if (!curves.length) continue\r\n\r\n        for (var j = 0, c; j < curves.length; j++) {\r\n          c = curves[j]\r\n          seg = ['C', c.x1, c.y1, c.x2, c.y2, c.x, c.y]\r\n          if (j < curves.length - 1) result.push(seg)\r\n        }\r\n\r\n        break\r\n      case 'S':\r\n        // default control point\r\n        var cx = x\r\n        var cy = y\r\n        if (prev == 'C' || prev == 'S') {\r\n          cx += cx - bezierX // reflect the previous command's control\r\n          cy += cy - bezierY // point relative to the current point\r\n        }\r\n        seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]]\r\n        break\r\n      case 'T':\r\n        if (prev == 'Q' || prev == 'T') {\r\n          quadX = x * 2 - quadX // as with 'S' reflect previous control point\r\n          quadY = y * 2 - quadY\r\n        } else {\r\n          quadX = x\r\n          quadY = y\r\n        }\r\n        seg = quadratic(x, y, quadX, quadY, seg[1], seg[2])\r\n        break\r\n      case 'Q':\r\n        quadX = seg[1]\r\n        quadY = seg[2]\r\n        seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4])\r\n        break\r\n      case 'L':\r\n        seg = line(x, y, seg[1], seg[2])\r\n        break\r\n      case 'H':\r\n        seg = line(x, y, seg[1], y)\r\n        break\r\n      case 'V':\r\n        seg = line(x, y, x, seg[1])\r\n        break\r\n      case 'Z':\r\n        seg = line(x, y, startX, startY)\r\n        break\r\n    }\r\n\r\n    // update state\r\n    prev = command\r\n    x = seg[seg.length - 2]\r\n    y = seg[seg.length - 1]\r\n    if (seg.length > 4) {\r\n      bezierX = seg[seg.length - 4]\r\n      bezierY = seg[seg.length - 3]\r\n    } else {\r\n      bezierX = x\r\n      bezierY = y\r\n    }\r\n    result.push(seg)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nfunction line(x1, y1, x2, y2){\r\n  return ['C', x1, y1, x2, y2, x2, y2]\r\n}\r\n\r\nfunction quadratic(x1, y1, cx, cy, x2, y2){\r\n  return [\r\n    'C',\r\n    x1/3 + (2/3) * cx,\r\n    y1/3 + (2/3) * cy,\r\n    x2/3 + (2/3) * cx,\r\n    y2/3 + (2/3) * cy,\r\n    x2,\r\n    y2\r\n  ]\r\n}\r\n"],
  "mappings": "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",
  "names": ["swizzle", "min", "max", "mapToEllipse", "approxUnitArc", "vectorAngle", "getArcCenter", "arcToBezier", "line", "absPath", "parsePath", "colorString", "height", "width", "yOffset", "xOffset"]
}
